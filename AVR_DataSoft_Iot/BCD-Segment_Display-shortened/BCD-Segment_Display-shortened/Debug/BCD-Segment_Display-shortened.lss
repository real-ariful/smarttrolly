
BCD-Segment_Display-shortened.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000663  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000276  00000000  00000000  00000d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  00001361  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000144d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
    DDRD= 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	PORTD =0;
  70:	12 ba       	out	0x12, r1	; 18
	int a=0;
  72:	60 e0       	ldi	r22, 0x00	; 0
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	ab 01       	movw	r20, r22
  78:	40 56       	subi	r20, 0x60	; 96
  7a:	5f 4f       	sbci	r21, 0xFF	; 255
  7c:	9b 01       	movw	r18, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	90 e7       	ldi	r25, 0x70	; 112
  82:	e2 e0       	ldi	r30, 0x02	; 2
  84:	81 50       	subi	r24, 0x01	; 1
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e0 40       	sbci	r30, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
  90:	80 e0       	ldi	r24, 0x00	; 0
		for (int i=0; i<10; i++)
		{
			_delay_ms (100);
			for (int j=0; j<10; j++)
			{
				PORTD = j|a;
  92:	98 2f       	mov	r25, r24
  94:	92 2b       	or	r25, r18
  96:	92 bb       	out	0x12, r25	; 18
  98:	ff ef       	ldi	r31, 0xFF	; 255
  9a:	90 e7       	ldi	r25, 0x70	; 112
  9c:	e2 e0       	ldi	r30, 0x02	; 2
  9e:	f1 50       	subi	r31, 0x01	; 1
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e0 40       	sbci	r30, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
  aa:	8f 5f       	subi	r24, 0xFF	; 255
    while (1) 
    {
		for (int i=0; i<10; i++)
		{
			_delay_ms (100);
			for (int j=0; j<10; j++)
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	89 f7       	brne	.-30     	; 0x92 <main+0x26>
			{
				PORTD = j|a;
				_delay_ms (100);
			}
			a=a+0b00010000;
  b0:	20 5f       	subi	r18, 0xF0	; 240
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
			PORTC= a|0;
  b4:	25 bb       	out	0x15, r18	; 21
	PORTD =0;
	int a=0;
		
    while (1) 
    {
		for (int i=0; i<10; i++)
  b6:	42 17       	cp	r20, r18
  b8:	53 07       	cpc	r21, r19
  ba:	09 f7       	brne	.-62     	; 0x7e <main+0x12>
  bc:	60 56       	subi	r22, 0x60	; 96
  be:	7f 4f       	sbci	r23, 0xFF	; 255
  c0:	da cf       	rjmp	.-76     	; 0x76 <main+0xa>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
