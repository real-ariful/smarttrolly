
USART_while_if.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000974  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e6  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000357  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001768  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a5  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001dbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  8e:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <USART_init>:

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  9a:	83 e3       	ldi	r24, 0x33	; 51
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a0:	88 e1       	ldi	r24, 0x18	; 24
  a2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ac:	08 95       	ret

000000ae <USART_send>:

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
  ae:	e0 ec       	ldi	r30, 0xC0	; 192
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	90 81       	ld	r25, Z
  b4:	95 ff       	sbrs	r25, 5
  b6:	fd cf       	rjmp	.-6      	; 0xb2 <USART_send+0x4>
	UDR0 = data;
  b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  bc:	08 95       	ret

000000be <USART_putstring>:
	char buffer [sizeof(unsigned int)*8+1];
	utoa (number,buffer,10);
	USART_putstring(buffer);
}

void USART_putstring(char* StringPtr){
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
  c4:	88 81       	ld	r24, Y
  c6:	88 23       	and	r24, r24
  c8:	31 f0       	breq	.+12     	; 0xd6 <USART_putstring+0x18>
  ca:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
  cc:	0e 94 57 00 	call	0xae	; 0xae <USART_send>
	USART_putstring(buffer);
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
  d0:	89 91       	ld	r24, Y+
  d2:	81 11       	cpse	r24, r1
  d4:	fb cf       	rjmp	.-10     	; 0xcc <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	USART_send('\r');
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	0e 94 57 00 	call	0xae	; 0xae <USART_send>
	
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <USART_putInt>:
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
	
}

void USART_putInt(int number){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	61 97       	sbiw	r28, 0x11	; 17
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
  f6:	4a e0       	ldi	r20, 0x0A	; 10
  f8:	be 01       	movw	r22, r28
  fa:	6f 5f       	subi	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	0e 94 a7 00 	call	0x14e	; 0x14e <__utoa_ncheck>
	char buffer [sizeof(unsigned int)*8+1];
	utoa (number,buffer,10);
	USART_putstring(buffer);
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 5f 00 	call	0xbe	; 0xbe <USART_putstring>
}
 10a:	61 96       	adiw	r28, 0x11	; 17
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	f8 94       	cli
 110:	de bf       	out	0x3e, r29	; 62
 112:	0f be       	out	0x3f, r0	; 63
 114:	cd bf       	out	0x3d, r28	; 61
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <main>:
void USART_putInt(int number);

char String[]="Hello World!!";    //String[] is in fact an array but when we put the text between the " " symbols the compiler threats it as a String and automatically puts the null termination character in the end of the text

int main(void){
	USART_init();        //Call the USART initialization code
 11c:	0e 94 4b 00 	call	0x96	; 0x96 <USART_init>
	
	while(1){
		char n=100;
 120:	c4 e6       	ldi	r28, 0x64	; 100
		while (n>0)
		{
			if(n>0)
			{
				USART_send(n);
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 57 00 	call	0xae	; 0xae <USART_send>
				n--;
 128:	c1 50       	subi	r28, 0x01	; 1
int main(void){
	USART_init();        //Call the USART initialization code
	
	while(1){
		char n=100;
		while (n>0)
 12a:	d9 f7       	brne	.-10     	; 0x122 <main+0x6>
 12c:	c4 e6       	ldi	r28, 0x64	; 100
 12e:	d0 e0       	ldi	r29, 0x00	; 0
				USART_send(n);
				n--;
			}
		}
		for(int i=100;i>0;i--){
			USART_putInt(i);
 130:	ce 01       	movw	r24, r28
 132:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_putInt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	80 e7       	ldi	r24, 0x70	; 112
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x20>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x2a>
 146:	00 00       	nop
			{
				USART_send(n);
				n--;
			}
		}
		for(int i=100;i>0;i--){
 148:	21 97       	sbiw	r28, 0x01	; 1
 14a:	91 f7       	brne	.-28     	; 0x130 <main+0x14>
 14c:	e9 cf       	rjmp	.-46     	; 0x120 <main+0x4>

0000014e <__utoa_ncheck>:
 14e:	bb 27       	eor	r27, r27

00000150 <__utoa_common>:
 150:	fb 01       	movw	r30, r22
 152:	55 27       	eor	r21, r21
 154:	aa 27       	eor	r26, r26
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	aa 1f       	adc	r26, r26
 15c:	a4 17       	cp	r26, r20
 15e:	10 f0       	brcs	.+4      	; 0x164 <__utoa_common+0x14>
 160:	a4 1b       	sub	r26, r20
 162:	83 95       	inc	r24
 164:	50 51       	subi	r21, 0x10	; 16
 166:	b9 f7       	brne	.-18     	; 0x156 <__utoa_common+0x6>
 168:	a0 5d       	subi	r26, 0xD0	; 208
 16a:	aa 33       	cpi	r26, 0x3A	; 58
 16c:	08 f0       	brcs	.+2      	; 0x170 <__utoa_common+0x20>
 16e:	a9 5d       	subi	r26, 0xD9	; 217
 170:	a1 93       	st	Z+, r26
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	79 f7       	brne	.-34     	; 0x154 <__utoa_common+0x4>
 176:	b1 11       	cpse	r27, r1
 178:	b1 93       	st	Z+, r27
 17a:	11 92       	st	Z+, r1
 17c:	cb 01       	movw	r24, r22
 17e:	0c 94 c1 00 	jmp	0x182	; 0x182 <strrev>

00000182 <strrev>:
 182:	dc 01       	movw	r26, r24
 184:	fc 01       	movw	r30, r24
 186:	67 2f       	mov	r22, r23
 188:	71 91       	ld	r23, Z+
 18a:	77 23       	and	r23, r23
 18c:	e1 f7       	brne	.-8      	; 0x186 <strrev+0x4>
 18e:	32 97       	sbiw	r30, 0x02	; 2
 190:	04 c0       	rjmp	.+8      	; 0x19a <strrev+0x18>
 192:	7c 91       	ld	r23, X
 194:	6d 93       	st	X+, r22
 196:	70 83       	st	Z, r23
 198:	62 91       	ld	r22, -Z
 19a:	ae 17       	cp	r26, r30
 19c:	bf 07       	cpc	r27, r31
 19e:	c8 f3       	brcs	.-14     	; 0x192 <strrev+0x10>
 1a0:	08 95       	ret

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
