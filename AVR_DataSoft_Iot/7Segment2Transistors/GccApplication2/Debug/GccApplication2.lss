
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000688  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a9  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <util/delay.h>


/* Replace with your library code */
int main(void)
{while(1)
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	{	DDRC=0xFF;
  96:	ff 24       	eor	r15, r15
  98:	fa 94       	dec	r15
		DDRB=0b00000011;
  9a:	03 e0       	ldi	r16, 0x03	; 3
		char ARR[]={0x3f,0x06,0x5b,0x4f, 0x66,0x6d, 0x7d,0x07,0xff,0x6f};
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	6c 01       	movw	r12, r24
  a2:	9e 01       	movw	r18, r28
  a4:	25 5f       	subi	r18, 0xF5	; 245
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
		for(int i=0; i<=9; i++)
			{	PORTB= 0x00;
			
			for(int j=0; j<=9;j++)
				{
					PORTB=0b00000001;
  a8:	41 e0       	ldi	r20, 0x01	; 1
					PORTC = ARR [i];
					_delay_ms(100);
					
					PORTB = 0b00000010;
  aa:	92 e0       	ldi	r25, 0x02	; 2


/* Replace with your library code */
int main(void)
{while(1)
	{	DDRC=0xFF;
  ac:	f4 ba       	out	0x14, r15	; 20
		DDRB=0b00000011;
  ae:	07 bb       	out	0x17, r16	; 23
		char ARR[]={0x3f,0x06,0x5b,0x4f, 0x66,0x6d, 0x7d,0x07,0xff,0x6f};
  b0:	8a e0       	ldi	r24, 0x0A	; 10
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	d6 01       	movw	r26, r12
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	8a 95       	dec	r24
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x36>
  c0:	6c 2d       	mov	r22, r12
  c2:	5d 2d       	mov	r21, r13
  c4:	d6 01       	movw	r26, r12
		for(int i=0; i<=9; i++)
			{	PORTB= 0x00;
  c6:	18 ba       	out	0x18, r1	; 24
  c8:	e6 2f       	mov	r30, r22
  ca:	f5 2f       	mov	r31, r21
			
			for(int j=0; j<=9;j++)
				{
					PORTB=0b00000001;
  cc:	48 bb       	out	0x18, r20	; 24
					PORTC = ARR [i];
  ce:	8c 91       	ld	r24, X
  d0:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	1f ef       	ldi	r17, 0xFF	; 255
  d4:	70 e7       	ldi	r23, 0x70	; 112
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	11 50       	subi	r17, 0x01	; 1
  da:	70 40       	sbci	r23, 0x00	; 0
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x56>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x60>
  e2:	00 00       	nop
					_delay_ms(100);
					
					PORTB = 0b00000010;
  e4:	98 bb       	out	0x18, r25	; 24
					PORTC = ARR[j];
  e6:	81 91       	ld	r24, Z+
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	1f ef       	ldi	r17, 0xFF	; 255
  ec:	70 e7       	ldi	r23, 0x70	; 112
  ee:	82 e0       	ldi	r24, 0x02	; 2
  f0:	11 50       	subi	r17, 0x01	; 1
  f2:	70 40       	sbci	r23, 0x00	; 0
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x6e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <main+0x78>
  fa:	00 00       	nop
		DDRB=0b00000011;
		char ARR[]={0x3f,0x06,0x5b,0x4f, 0x66,0x6d, 0x7d,0x07,0xff,0x6f};
		for(int i=0; i<=9; i++)
			{	PORTB= 0x00;
			
			for(int j=0; j<=9;j++)
  fc:	e2 17       	cp	r30, r18
  fe:	f3 07       	cpc	r31, r19
 100:	29 f7       	brne	.-54     	; 0xcc <main+0x4a>
 102:	11 96       	adiw	r26, 0x01	; 1
int main(void)
{while(1)
	{	DDRC=0xFF;
		DDRB=0b00000011;
		char ARR[]={0x3f,0x06,0x5b,0x4f, 0x66,0x6d, 0x7d,0x07,0xff,0x6f};
		for(int i=0; i<=9; i++)
 104:	a2 17       	cp	r26, r18
 106:	b3 07       	cpc	r27, r19
 108:	f1 f6       	brne	.-68     	; 0xc6 <main+0x44>
 10a:	d0 cf       	rjmp	.-96     	; 0xac <main+0x2a>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
