
ADC_led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a87  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000829  00000000  00000000  00000dbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003cc  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000262  00000000  00000000  00001eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002111  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  88:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <InitADC>:

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	80 64       	ori	r24, 0x40	; 64
  98:	80 83       	st	Z, r24
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	87 68       	ori	r24, 0x87	; 135
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <ReadADC>:
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	80 83       	st	Z, r24
  b4:	ea e7       	ldi	r30, 0x7A	; 122
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	80 83       	st	Z, r24
  be:	80 81       	ld	r24, Z
  c0:	86 fd       	sbrc	r24, 6
  c2:	fd cf       	rjmp	.-6      	; 0xbe <ReadADC+0x18>
  c4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  cc:	08 95       	ret

000000ce <USART_init>:
  ce:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  e4:	08 95       	ret

000000e6 <USART_send>:

void USART_send( unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 81       	ld	r25, Z
  ec:	95 ff       	sbrs	r25, 5
  ee:	fd cf       	rjmp	.-6      	; 0xea <USART_send+0x4>
	UDR0 = data;
  f0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  f4:	08 95       	ret

000000f6 <USART_putstring>:
	utoa (number,buffer,10);
	USART_putstring(buffer);
}

void USART_putstring(char* StringPtr)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
  fc:	88 81       	ld	r24, Y
  fe:	88 23       	and	r24, r24
 100:	31 f0       	breq	.+12     	; 0x10e <USART_putstring+0x18>
 102:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 104:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_send>
}

void USART_putstring(char* StringPtr)
{
	
	while(*StringPtr != 0x00){
 108:	89 91       	ld	r24, Y+
 10a:	81 11       	cpse	r24, r1
 10c:	fb cf       	rjmp	.-10     	; 0x104 <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	USART_send('\r');
 10e:	8d e0       	ldi	r24, 0x0D	; 13
 110:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_send>
	
}
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:
	ADCSRA |= (1<<ADSC);
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
	return ADC;
}
int main(void){
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <main+0x6>
 120:	00 d0       	rcall	.+0      	; 0x122 <main+0x8>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	USART_init();        //Call the USART initialization code
 126:	0e 94 67 00 	call	0xce	; 0xce <USART_init>
	InitADC();
 12a:	0e 94 48 00 	call	0x90	; 0x90 <InitADC>
	DDRB = 0x01;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	84 b9       	out	0x04, r24	; 4
	while(1)
	{
		
		adc_value = ReadADC(0);
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadADC>
 138:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 140:	4a e0       	ldi	r20, 0x0A	; 10
 142:	be 01       	movw	r22, r28
 144:	6f 5f       	subi	r22, 0xFF	; 255
 146:	7f 4f       	sbci	r23, 0xFF	; 255
 148:	0e 94 cf 00 	call	0x19e	; 0x19e <__utoa_ncheck>
		char buffer[4];
		utoa(adc_value, buffer, 10);
		USART_putstring(buffer);
 14c:	ce 01       	movw	r24, r28
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	0e 94 7b 00 	call	0xf6	; 0xf6 <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	81 ee       	ldi	r24, 0xE1	; 225
 158:	94 e0       	ldi	r25, 0x04	; 4
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x40>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x4a>
 164:	00 00       	nop
		_delay_ms(100);
		
		if (ReadADC(0) > 512)
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <ReadADC>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	92 40       	sbci	r25, 0x02	; 2
 170:	58 f0       	brcs	.+22     	; 0x188 <main+0x6e>
		{
			PORTB |= (1<<PB0);
 172:	28 9a       	sbi	0x05, 0	; 5
 174:	8f ef       	ldi	r24, 0xFF	; 255
 176:	91 ee       	ldi	r25, 0xE1	; 225
 178:	24 e0       	ldi	r18, 0x04	; 4
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x60>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x6a>
 184:	00 00       	nop
 186:	d5 cf       	rjmp	.-86     	; 0x132 <main+0x18>
			_delay_ms(100);
		}
		else
		{
			PORTB &=~ (1<<PB0);
 188:	28 98       	cbi	0x05, 0	; 5
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	91 ee       	ldi	r25, 0xE1	; 225
 18e:	24 e0       	ldi	r18, 0x04	; 4
 190:	81 50       	subi	r24, 0x01	; 1
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	20 40       	sbci	r18, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x76>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0x80>
 19a:	00 00       	nop
			_delay_ms(100);
		}
	}
 19c:	ca cf       	rjmp	.-108    	; 0x132 <main+0x18>

0000019e <__utoa_ncheck>:
 19e:	bb 27       	eor	r27, r27

000001a0 <__utoa_common>:
 1a0:	fb 01       	movw	r30, r22
 1a2:	55 27       	eor	r21, r21
 1a4:	aa 27       	eor	r26, r26
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	aa 1f       	adc	r26, r26
 1ac:	a4 17       	cp	r26, r20
 1ae:	10 f0       	brcs	.+4      	; 0x1b4 <__utoa_common+0x14>
 1b0:	a4 1b       	sub	r26, r20
 1b2:	83 95       	inc	r24
 1b4:	50 51       	subi	r21, 0x10	; 16
 1b6:	b9 f7       	brne	.-18     	; 0x1a6 <__utoa_common+0x6>
 1b8:	a0 5d       	subi	r26, 0xD0	; 208
 1ba:	aa 33       	cpi	r26, 0x3A	; 58
 1bc:	08 f0       	brcs	.+2      	; 0x1c0 <__utoa_common+0x20>
 1be:	a9 5d       	subi	r26, 0xD9	; 217
 1c0:	a1 93       	st	Z+, r26
 1c2:	00 97       	sbiw	r24, 0x00	; 0
 1c4:	79 f7       	brne	.-34     	; 0x1a4 <__utoa_common+0x4>
 1c6:	b1 11       	cpse	r27, r1
 1c8:	b1 93       	st	Z+, r27
 1ca:	11 92       	st	Z+, r1
 1cc:	cb 01       	movw	r24, r22
 1ce:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <strrev>

000001d2 <strrev>:
 1d2:	dc 01       	movw	r26, r24
 1d4:	fc 01       	movw	r30, r24
 1d6:	67 2f       	mov	r22, r23
 1d8:	71 91       	ld	r23, Z+
 1da:	77 23       	and	r23, r23
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <strrev+0x4>
 1de:	32 97       	sbiw	r30, 0x02	; 2
 1e0:	04 c0       	rjmp	.+8      	; 0x1ea <strrev+0x18>
 1e2:	7c 91       	ld	r23, X
 1e4:	6d 93       	st	X+, r22
 1e6:	70 83       	st	Z, r23
 1e8:	62 91       	ld	r22, -Z
 1ea:	ae 17       	cp	r26, r30
 1ec:	bf 07       	cpc	r27, r31
 1ee:	c8 f3       	brcs	.-14     	; 0x1e2 <strrev+0x10>
 1f0:	08 95       	ret

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
