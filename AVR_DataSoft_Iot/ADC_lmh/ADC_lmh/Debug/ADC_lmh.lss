
ADC_lmh.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800110  00800110  00000326  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bbf  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000829  00000000  00000000  00000faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041b  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00001cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033a  00000000  00000000  000020f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000242d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e8       	ldi	r30, 0x82	; 130
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  9e:	0c 94 3f 01 	jmp	0x27e	; 0x27e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitADC>:

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1<<RXC0)));
	return UDR0;
}
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 68       	ori	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <ReadADC>:
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	89 2b       	or	r24, r25
  c8:	80 83       	st	Z, r24
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 64       	ori	r24, 0x40	; 64
  d2:	80 83       	st	Z, r24
  d4:	80 81       	ld	r24, Z
  d6:	86 fd       	sbrc	r24, 6
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <ReadADC+0x18>
  da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e2:	08 95       	ret

000000e4 <USART_init>:
  e4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e8:	83 e3       	ldi	r24, 0x33	; 51
  ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ee:	88 e1       	ldi	r24, 0x18	; 24
  f0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  fa:	08 95       	ret

000000fc <USART_send>:

void USART_send( unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
  fc:	e0 ec       	ldi	r30, 0xC0	; 192
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	95 ff       	sbrs	r25, 5
 104:	fd cf       	rjmp	.-6      	; 0x100 <USART_send+0x4>
	UDR0 = data;
 106:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 10a:	08 95       	ret

0000010c <USART_putstring>:
	utoa (number,buffer,10);
	USART_putstring(buffer);
}

void USART_putstring(char* StringPtr)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 112:	88 81       	ld	r24, Y
 114:	88 23       	and	r24, r24
 116:	31 f0       	breq	.+12     	; 0x124 <USART_putstring+0x18>
 118:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*StringPtr);
 11a:	0e 94 7e 00 	call	0xfc	; 0xfc <USART_send>
}

void USART_putstring(char* StringPtr)
{
	
	while(*StringPtr != 0x00){
 11e:	89 91       	ld	r24, Y+
 120:	81 11       	cpse	r24, r1
 122:	fb cf       	rjmp	.-10     	; 0x11a <USART_putstring+0xe>
		USART_send(*StringPtr);
	StringPtr++;}
	USART_send('\r');
 124:	8d e0       	ldi	r24, 0x0D	; 13
 126:	0e 94 7e 00 	call	0xfc	; 0xfc <USART_send>
	
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <main>:
	ADCSRA |= (1<<ADSC);
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
	return ADC;
}
int main(void){
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <main+0x6>
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x8>
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
	USART_init();        //Call the USART initialization code
 13c:	0e 94 72 00 	call	0xe4	; 0xe4 <USART_init>
	InitADC();
 140:	0e 94 53 00 	call	0xa6	; 0xa6 <InitADC>
	DDRB = 0x01;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	84 b9       	out	0x04, r24	; 4
	while(1)
	{		
		adc_value = ReadADC(0);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 5e 00 	call	0xbc	; 0xbc <ReadADC>
 14e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 152:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 156:	4a e0       	ldi	r20, 0x0A	; 10
 158:	be 01       	movw	r22, r28
 15a:	6f 5f       	subi	r22, 0xFF	; 255
 15c:	7f 4f       	sbci	r23, 0xFF	; 255
 15e:	0e 94 15 01 	call	0x22a	; 0x22a <__utoa_ncheck>
		char buffer[4];
		utoa(adc_value, buffer, 10);
		USART_putstring(buffer);
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 86 00 	call	0x10c	; 0x10c <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	81 ee       	ldi	r24, 0xE1	; 225
 16e:	94 e0       	ldi	r25, 0x04	; 4
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x40>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x4a>
 17a:	00 00       	nop
		_delay_ms(100);
		
				
			if(ReadADC(0) <=300)
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 5e 00 	call	0xbc	; 0xbc <ReadADC>
 182:	8d 32       	cpi	r24, 0x2D	; 45
 184:	91 40       	sbci	r25, 0x01	; 1
 186:	70 f4       	brcc	.+28     	; 0x1a4 <main+0x74>
				{ USART_putstring("LOW");
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 86 00 	call	0x10c	; 0x10c <USART_putstring>
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	91 ee       	ldi	r25, 0xE1	; 225
 194:	24 e0       	ldi	r18, 0x04	; 4
 196:	81 50       	subi	r24, 0x01	; 1
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	20 40       	sbci	r18, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x66>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x70>
 1a0:	00 00       	nop
 1a2:	27 c0       	rjmp	.+78     	; 0x1f2 <main+0xc2>
				_delay_ms(100);}
			else if (ReadADC(0) >300 && ReadADC(0) <900)
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 5e 00 	call	0xbc	; 0xbc <ReadADC>
 1aa:	8d 32       	cpi	r24, 0x2D	; 45
 1ac:	91 40       	sbci	r25, 0x01	; 1
 1ae:	a0 f0       	brcs	.+40     	; 0x1d8 <main+0xa8>
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 5e 00 	call	0xbc	; 0xbc <ReadADC>
 1b6:	84 38       	cpi	r24, 0x84	; 132
 1b8:	93 40       	sbci	r25, 0x03	; 3
 1ba:	70 f4       	brcc	.+28     	; 0x1d8 <main+0xa8>
				{USART_putstring("MEDIUM");
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 86 00 	call	0x10c	; 0x10c <USART_putstring>
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	91 ee       	ldi	r25, 0xE1	; 225
 1c8:	24 e0       	ldi	r18, 0x04	; 4
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	20 40       	sbci	r18, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x9a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0xa4>
 1d4:	00 00       	nop
 1d6:	0d c0       	rjmp	.+26     	; 0x1f2 <main+0xc2>
				_delay_ms(100);}
 			else {
				 USART_putstring("HIGH");
 1d8:	8b e0       	ldi	r24, 0x0B	; 11
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	0e 94 86 00 	call	0x10c	; 0x10c <USART_putstring>
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	91 ee       	ldi	r25, 0xE1	; 225
 1e4:	24 e0       	ldi	r18, 0x04	; 4
 1e6:	81 50       	subi	r24, 0x01	; 1
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	20 40       	sbci	r18, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0xb6>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0xc0>
 1f0:	00 00       	nop
				_delay_ms(100);}
				
				
					
					
		if (ReadADC(0) > 512)
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 5e 00 	call	0xbc	; 0xbc <ReadADC>
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	92 40       	sbci	r25, 0x02	; 2
 1fc:	58 f0       	brcs	.+22     	; 0x214 <main+0xe4>
		{
			PORTB |= (1<<PB0);
 1fe:	28 9a       	sbi	0x05, 0	; 5
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	91 ee       	ldi	r25, 0xE1	; 225
 204:	24 e0       	ldi	r18, 0x04	; 4
 206:	81 50       	subi	r24, 0x01	; 1
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	20 40       	sbci	r18, 0x00	; 0
 20c:	e1 f7       	brne	.-8      	; 0x206 <main+0xd6>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <main+0xe0>
 210:	00 00       	nop
 212:	9a cf       	rjmp	.-204    	; 0x148 <main+0x18>
			_delay_ms(100);
		}
		else
		{
			PORTB &=~ (1<<PB0);
 214:	28 98       	cbi	0x05, 0	; 5
 216:	8f ef       	ldi	r24, 0xFF	; 255
 218:	91 ee       	ldi	r25, 0xE1	; 225
 21a:	24 e0       	ldi	r18, 0x04	; 4
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	20 40       	sbci	r18, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0xec>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0xf6>
 226:	00 00       	nop
			_delay_ms(100);
		}
		
	}
 228:	8f cf       	rjmp	.-226    	; 0x148 <main+0x18>

0000022a <__utoa_ncheck>:
 22a:	bb 27       	eor	r27, r27

0000022c <__utoa_common>:
 22c:	fb 01       	movw	r30, r22
 22e:	55 27       	eor	r21, r21
 230:	aa 27       	eor	r26, r26
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	aa 1f       	adc	r26, r26
 238:	a4 17       	cp	r26, r20
 23a:	10 f0       	brcs	.+4      	; 0x240 <__utoa_common+0x14>
 23c:	a4 1b       	sub	r26, r20
 23e:	83 95       	inc	r24
 240:	50 51       	subi	r21, 0x10	; 16
 242:	b9 f7       	brne	.-18     	; 0x232 <__utoa_common+0x6>
 244:	a0 5d       	subi	r26, 0xD0	; 208
 246:	aa 33       	cpi	r26, 0x3A	; 58
 248:	08 f0       	brcs	.+2      	; 0x24c <__utoa_common+0x20>
 24a:	a9 5d       	subi	r26, 0xD9	; 217
 24c:	a1 93       	st	Z+, r26
 24e:	00 97       	sbiw	r24, 0x00	; 0
 250:	79 f7       	brne	.-34     	; 0x230 <__utoa_common+0x4>
 252:	b1 11       	cpse	r27, r1
 254:	b1 93       	st	Z+, r27
 256:	11 92       	st	Z+, r1
 258:	cb 01       	movw	r24, r22
 25a:	0c 94 2f 01 	jmp	0x25e	; 0x25e <strrev>

0000025e <strrev>:
 25e:	dc 01       	movw	r26, r24
 260:	fc 01       	movw	r30, r24
 262:	67 2f       	mov	r22, r23
 264:	71 91       	ld	r23, Z+
 266:	77 23       	and	r23, r23
 268:	e1 f7       	brne	.-8      	; 0x262 <strrev+0x4>
 26a:	32 97       	sbiw	r30, 0x02	; 2
 26c:	04 c0       	rjmp	.+8      	; 0x276 <strrev+0x18>
 26e:	7c 91       	ld	r23, X
 270:	6d 93       	st	X+, r22
 272:	70 83       	st	Z, r23
 274:	62 91       	ld	r22, -Z
 276:	ae 17       	cp	r26, r30
 278:	bf 07       	cpc	r27, r31
 27a:	c8 f3       	brcs	.-14     	; 0x26e <strrev+0x10>
 27c:	08 95       	ret

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
