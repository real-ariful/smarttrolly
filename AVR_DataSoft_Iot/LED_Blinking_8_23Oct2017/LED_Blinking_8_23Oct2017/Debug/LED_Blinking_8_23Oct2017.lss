
LED_Blinking_8_23Oct2017.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cb  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000599  00000000  00000000  000008c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a4  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000333  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000159b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	81 bb       	out	0x11, r24	; 17
	while(1)
	{	for (int i=0; i <=7; i++)
		{
		PORTD |= (1<<i);
  70:	61 e0       	ldi	r22, 0x01	; 1
  72:	70 e0       	ldi	r23, 0x00	; 0

int main(void)
{
	DDRD = 0xFF;
	while(1)
	{	for (int i=0; i <=7; i++)
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
		{
		PORTD |= (1<<i);
  78:	42 b3       	in	r20, 0x12	; 18
  7a:	cb 01       	movw	r24, r22
  7c:	02 2e       	mov	r0, r18
  7e:	02 c0       	rjmp	.+4      	; 0x84 <main+0x18>
  80:	88 0f       	add	r24, r24
  82:	99 1f       	adc	r25, r25
  84:	0a 94       	dec	r0
  86:	e2 f7       	brpl	.-8      	; 0x80 <main+0x14>
  88:	94 2f       	mov	r25, r20
  8a:	98 2b       	or	r25, r24
  8c:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	4f e7       	ldi	r20, 0x7F	; 127
  90:	59 ea       	ldi	r21, 0xA9	; 169
  92:	e3 e0       	ldi	r30, 0x03	; 3
  94:	41 50       	subi	r20, 0x01	; 1
  96:	50 40       	sbci	r21, 0x00	; 0
  98:	e0 40       	sbci	r30, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x28>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
		_delay_ms(150);
		PORTD &=~ (1<<i);
  a0:	92 b3       	in	r25, 0x12	; 18
  a2:	80 95       	com	r24
  a4:	89 23       	and	r24, r25
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	4f e7       	ldi	r20, 0x7F	; 127
  aa:	59 ea       	ldi	r21, 0xA9	; 169
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	41 50       	subi	r20, 0x01	; 1
  b0:	50 40       	sbci	r21, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop

int main(void)
{
	DDRD = 0xFF;
	while(1)
	{	for (int i=0; i <=7; i++)
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	28 30       	cpi	r18, 0x08	; 8
  c0:	31 05       	cpc	r19, r1
  c2:	d1 f6       	brne	.-76     	; 0x78 <main+0xc>
  c4:	26 e0       	ldi	r18, 0x06	; 6
  c6:	30 e0       	ldi	r19, 0x00	; 0
		PORTD &=~ (1<<i);
		_delay_ms(150);
		}
		for (int j=6; j >=1; j--)
		{
			PORTD |= (1<<j);
  c8:	42 b3       	in	r20, 0x12	; 18
  ca:	cb 01       	movw	r24, r22
  cc:	02 2e       	mov	r0, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x68>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <main+0x64>
  d8:	94 2f       	mov	r25, r20
  da:	98 2b       	or	r25, r24
  dc:	92 bb       	out	0x12, r25	; 18
  de:	ef e7       	ldi	r30, 0x7F	; 127
  e0:	49 ea       	ldi	r20, 0xA9	; 169
  e2:	53 e0       	ldi	r21, 0x03	; 3
  e4:	e1 50       	subi	r30, 0x01	; 1
  e6:	40 40       	sbci	r20, 0x00	; 0
  e8:	50 40       	sbci	r21, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x78>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x82>
  ee:	00 00       	nop
			_delay_ms(150);
			PORTD &=~ (1<<j);
  f0:	92 b3       	in	r25, 0x12	; 18
  f2:	80 95       	com	r24
  f4:	89 23       	and	r24, r25
  f6:	82 bb       	out	0x12, r24	; 18
  f8:	8f e7       	ldi	r24, 0x7F	; 127
  fa:	99 ea       	ldi	r25, 0xA9	; 169
  fc:	e3 e0       	ldi	r30, 0x03	; 3
  fe:	81 50       	subi	r24, 0x01	; 1
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e0 40       	sbci	r30, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x92>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x9c>
 108:	00 00       	nop
		PORTD |= (1<<i);
		_delay_ms(150);
		PORTD &=~ (1<<i);
		_delay_ms(150);
		}
		for (int j=6; j >=1; j--)
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	31 09       	sbc	r19, r1
 10e:	e1 f6       	brne	.-72     	; 0xc8 <main+0x5c>
 110:	b1 cf       	rjmp	.-158    	; 0x74 <main+0x8>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
